#!/usr/bin/env ruby

require 'csv'
require 'pg'
require 'ostruct'

db_name = 'usa'
table_name = 'places'

mappings = {
  'Chestnut Hill:25'    => 'Boston',
  'Honolulu:15'         => 'Urban Honolulu',
  'Athens:13'           => 'Athens-Clarke County unified government (balance)',
  'University Park:42'  => 'State College',
  'Boise:16'            => 'Boise City',
  'Lexington:21'        => 'Lexington-Fayette',
  'Piscataway:34'       => 'New Brunswick',
  'Louisville:21'       => 'Louisville/Jefferson County metro government (balance)',
  'Amherst:36'          => 'Williamsville',
  'Nashville:47'        => 'Nashville-Davidson metropolitan government (balance)',
  'Fork Union:51'       => 'Weber City',
  'Indianapolis:18'     => 'Indianapolis city (balance)',
  'Ft. Lauderdale:12'   => 'Fort Lauderdale',
  'Brooklyn:36'         => 'New York',
  'Long Island:36'      => 'New York',
  'Ventura:06'          => 'San Buenaventura (Ventura)',
  'Woodland Hills:06'   => 'Los Angeles',
  'Harbor City:06'      => 'Los Angeles',
  'Wilmington:06'       => 'Los Angeles',
  'Sherman Oaks:06'     => 'Los Angeles',
  'Encino:06'           => 'Los Angeles',
  'Venice:06'           => 'Los Angeles',
  'West Hills:06'       => 'Los Angeles',
  'Lake Balboa:06'      => 'Los Angeles',
  'Van Nuys:06'         => 'Los Angeles',
  'LA:06'               => 'Los Angeles',
  'Orchard Lake:26'     => 'Orchard Lake Village',
  'Cypress:48'          => 'Houston',
  'Klein:48'            => 'Houston',
  'Alief:48'            => 'Houston',
  'Sugarland:48'        => 'Houston',
  'Ponte Vedra:12'      => 'Jacksonville',
  'Perkinston:28'       => 'Wiggins',
  'Autauga:01'          => 'Autaugaville',
  'Wayne:34'            => 'Paterson',
  'Ellenwood:13'        => 'Morrow',
  'Etiwanda:06'         => 'Rancho Cucamonga',
  'Cordova:47'          => 'Memphis',
  'Mililani:15'         => 'Mililani Town',
  'Wayne:42'            => 'Philadelphia',
  'Milford:09'          => 'Milford city (balance)',
  'Union:34'            => 'Union City',
  'Salt Lake:49'        => 'Salt Lake City',
  'Atco:34'             => 'Berlin',
  'Marlboro:24'         => 'Upper Marlboro',
  'Pittsburg:42'        => 'Pittsburgh',
  'Stafford:51'         => 'Stafford Courthouse',
  'Augusta:13'          => 'Augusta-Richmond County consolidated government (balance)',
  'West Chester:39'     => 'Beckett Ridge',
  'Cherry Hill:34'      => 'Camden',
  'Staten Island:36'    => 'New York',
  'Citra:12'            => 'Reddick',
  'Sicklerville:34'     => 'Williamstown',
  'Opa Locka:12'        => 'Opa-locka',
  'Newhall:06'          => 'Santa Clarita',
  'Avon:09'             => 'West Hartford',
  'Hallandale:12'       => 'Hallandale Beach',
  'Newbury Park:06'     => 'Thousand Oaks',
  'Macomb:26'           => 'Detroit',
  'Midlothian:51'       => 'Bon Air',
  'Wexford:42'          => 'Pittsburgh',
  'Palos Verdes:06'     => 'Rancho Palos Verdes',
  'Ocean:34'            => 'Ocean Grove'
}

schools = {}
conn = PG.connect(:dbname => db_name)

@stadiums = CSV.read('data/stadiums.csv', :headers => true).map do |st|
  OpenStruct.new(st.to_hash)
end

@states = CSV.read('data/states.csv', :headers => true).map do |st|
  OpenStruct.new(st.to_hash)
end

def state_for_recruit(recruit)
  @states.detect do |st|
    state = st.state.strip.downcase
    city, state2 = recruit.location.split(',')

    # Likely bad data.  No state given.
    if state2.nil?
      puts state2
      return nil
    end

    state == state2.strip.downcase
  end
end

def stadium_for_recruit(recruit)
  @stadiums.detect { |s| [s.team, s.alt].include?(recruit.institution) }
end

unfound_recruits = {}
i = 0
recruits = CSV.read('data/recruits.csv', :headers => true)
points = CSV.open('data/recruits-with-points.csv', 'w', :headers => recruits.headers.concat([:id, :place_gid, :statefp, :lat, :lon]), :write_headers => true)
recruits.each do |recruit|
  recruitvals = recruit.to_hash.values
  recruit = OpenStruct.new(recruit.to_hash)
  bsc_school = stadium_for_recruit(recruit)

  next if recruit.stars.to_i < 1

  if bsc_school
    schools[bsc_school.team] ||= 0
    schools[bsc_school.team] += 1

    state = state_for_recruit(recruit)
    city,_ = recruit.location.split(',')

    # Likely not a US location and we're only concerned with US recruiting
    if state.nil?
      puts recruit.inspect
      next
    end

    # Terrible stuff or "Normalization, LOL."
    city = mappings["#{city}:#{state.fips}"] if mappings["#{city}:#{state.fips}"]
    city2 = city.gsub('St.', 'Saint').gsub('Ft.', 'Fort').gsub('Mt.', 'Mount')
    city3 = city.gsub('Saint', 'St.').gsub('Fort', 'Ft.').gsub('Mount', 'Mt.')
    city4 = city.gsub('St ', 'St. ').gsub('Ft ', 'Ft. ').gsub('Mt ', 'Mt. ')

    names = [city, city2, city3, city4].map(&:downcase).map {|v| "'#{PG::Connection::escape_string(v)}'" }.join(',')

    begin
      res = conn.exec_params(%(SELECT name,gid FROM #{table_name} WHERE LOWER(name) IN(#{names}) AND statefp='#{state.fips}'))
    rescue PG::Error => err
      puts err.inspect
    end

    if !res.first.nil?
      recruit.place_gid = res.first['gid']
    else
      res = conn.exec("SELECT name FROM #{table_name} WHERE LOWER(name) LIKE $1 AND statefp=$2", ["%#{city.downcase}%", state.fips])
      if res.count == 1
        recruit.place_gid = res.first['gid']
      elsif res.count > 1
        puts "#{city}:#{state.fips}: #{state.state}, #{res.map {|r| r['name']}}"
      end
    end

    if recruit.place_gid.nil?
      unfound_recruits["#{city}:#{state.fips}"] ||= 0
      unfound_recruits["#{city}:#{state.fips}"] += 1
    end

    query = "WITH points as (SELECT *, RandomPointsInPolygon(#{table_name}.geom, 1) AS point FROM #{table_name} WHERE gid=$1) SELECT st_x(st_transform(point, 4326)) AS lon, st_y(st_transform(point, 4326)) AS lat FROM points"
    if recruit.place_gid
      res = conn.exec(query, [recruit.place_gid])
      lat = res.first['lat']
      lon = res.first['lon']
      vals = recruitvals.concat([i, recruit.place_gid, state.fips, lat, lon])
      points << vals

      i += 1
      puts i if i % 100 == 0
    end
  end
end

puts unfound_recruits.length
puts unfound_recruits.sort_by { |k,v| v }.reverse.inspect
